#include <MaxMatrix.h>
#include <avr/pgmspace.h>
int data = 7;    // SPI MOSI к DIN модуля MAX7219
int clock = 5;  // SPI CLK к CLK модуля MAX7219
int load = 4;    // SPI NSS к CS модуля MAX7219
int speeds = 200; //скорость бегущей строки
int brightness = 1; //яркость от 0 до 15
int maxInUse = 3;    //количество модулей MAX7219
int lendig = 7; //размер одного символа в массиве
int flag_s = 0;
char string1[] = " ё;ё:н:о"; //текст бегущей строки
PROGMEM prog_uchar CH[] = {
3, 8,  B00000000,  B00000000,  B00000000,  B00000000,  B00000000,  //  space
1, 8,  B01011111,  B00000000,  B00000000,  B00000000,  B00000000,  //  !
3, 8,  B00000011,  B00000000,  B00000011,  B00000000,  B00000000,  //  "
5, 8,  B00010100,  B00111110,  B00010100,  B00111110,  B00010100,  //  #
4, 8,  B00100100,  B01101010,  B00101011,  B00010010,  B00000000,  //  $
5, 8,  B01100011,  B00010011,  B00001000,  B01100100,  B01100011,  //  %
5, 8,  B00110110,  B01001001,  B01010110,  B00100000,  B01010000,  //  &
1, 8,  B00000011,  B00000000,  B00000000,  B00000000,  B00000000,  //  '
3, 8,  B00011100,  B00100010,  B01000001,  B00000000,  B00000000,  //  (
3, 8,  B01000001,  B00100010,  B00011100,  B00000000,  B00000000,  //  )
5, 8,  B00101000,  B00011000,  B00001110,  B00011000,  B00101000,  //  *
5, 8,  B00001000,  B00001000,  B00111110,  B00001000,  B00001000,  //  +
2, 8,  B10110000,  B01110000,  B00000000,  B00000000,  B00000000,  //  ,
4, 8,  B00001000,  B00001000,  B00001000,  B00001000,  B00000000,  //  -
2, 8,  B01100000,  B01100000,  B00000000,  B00000000,  B00000000,  //  .
4, 8,  B01100000,  B00011000,  B00000110,  B00000001,  B00000000,  //  /
4, 8,  B00111110,  B01000001,  B01000001,  B00111110,  B00000000,  //  0
3, 8,  B01000010,  B01111111,  B01000000,  B00000000,  B00000000,  //  1
4, 8,  B01100010,  B01010001,  B01001001,  B01000110,  B00000000,  //  2
4, 8,  B00100010,  B01000001,  B01001001,  B00110110,  B00000000,  //  3
4, 8,  B00011000,  B00010100,  B00010010,  B01111111,  B00000000,  //  4
4, 8,  B00100111,  B01000101,  B01000101,  B00111001,  B00000000,  //  5
4, 8,  B00111110,  B01001001,  B01001001,  B00110000,  B00000000,  //  6
4, 8,  B01100001,  B00010001,  B00001001,  B00000111,  B00000000,  //  7
4, 8,  B00110110,  B01001001,  B01001001,  B00110110,  B00000000,  //  8
4, 8,  B00000110,  B01001001,  B01001001,  B00111110,  B00000000,  //  9
2, 8,  B01010000,  B00000000,  B00000000,  B00000000,  B00000000,  //  :
2, 8,  B10000000,  B01010000,  B00000000,  B00000000,  B00000000,  //  ;
3, 8,  B00010000,  B00101000,  B01000100,  B00000000,  B00000000,  //  <
3, 8,  B00010100,  B00010100,  B00010100,  B00000000,  B00000000,  //  =
3, 8,  B01000100,  B00101000,  B00010000,  B00000000,  B00000000,  //  >
4, 8,  B00000010,  B01011001,  B00001001,  B00000110,  B00000000,  //  ?
5, 8,  B00111110,  B01001001,  B01010101,  B01011101,  B00001110,  //  @
4, 8,  B01111110,  B00010001,  B00010001,  B01111110,  B00000000,  //  A
4, 8,  B01111111,  B01001001,  B01001001,  B00110110,  B00000000,  //  B
4, 8,  B00111110,  B01000001,  B01000001,  B00100010,  B00000000,  //  C
4, 8,  B01111111,  B01000001,  B01000001,  B00111110,  B00000000,  //  D
4, 8,  B01111111,  B01001001,  B01001001,  B01000001,  B00000000,  //  E
4, 8,  B01111111,  B00001001,  B00001001,  B00000001,  B00000000,  //  F
4, 8,  B00111110,  B01000001,  B01001001,  B01111010,  B00000000,  //  G
4, 8,  B01111111,  B00001000,  B00001000,  B01111111,  B00000000,  //  H
3, 8,  B01000001,  B01111111,  B01000001,  B00000000,  B00000000,  //  I
4, 8,  B00110000,  B01000000,  B01000001,  B00111111,  B00000000,  //  J
4, 8,  B01111111,  B00001000,  B00010100,  B01100011,  B00000000,  //  K
4, 8,  B01111111,  B01000000,  B01000000,  B01000000,  B00000000,  //  L
5, 8,  B01111111,  B00000010,  B00001100,  B00000010,  B01111111,  //  M
5, 8,  B01111111,  B00000100,  B00001000,  B00010000,  B01111111,  //  N
4, 8,  B00111110,  B01000001,  B01000001,  B00111110,  B00000000,  //  O
4, 8,  B01111111,  B00001001,  B00001001,  B00000110,  B00000000,  //  P
4, 8,  B00111110,  B01000001,  B01000001,  B10111110,  B00000000,  //  Q
4, 8,  B01111111,  B00001001,  B00001001,  B01110110,  B00000000,  //  R
4, 8,  B01000110,  B01001001,  B01001001,  B00110010,  B00000000,  //  S
5, 8,  B00000001,  B00000001,  B01111111,  B00000001,  B00000001,  //  T
4, 8,  B00111111,  B01000000,  B01000000,  B00111111,  B00000000,  //  U
5, 8,  B00001111,  B00110000,  B01000000,  B00110000,  B00001111,  //  V
5, 8,  B00111111,  B01000000,  B00111000,  B01000000,  B00111111,  //  W
5, 8,  B01100011,  B00010100,  B00001000,  B00010100,  B01100011,  //  X
5, 8,  B00000111,  B00001000,  B01110000,  B00001000,  B00000111,  //  Y
4, 8,  B01100001,  B01010001,  B01001001,  B01000111,  B00000000,  //  Z
2, 8,  B01111111,  B01000001,  B00000000,  B00000000,  B00000000,  //  [
4, 8,  B00000001,  B00000110,  B00011000,  B01100000,  B00000000,  //  \ backslash
2, 8,  B01000001,  B01111111,  B00000000,  B00000000,  B00000000,  //  ]
3, 8,  B00000010,  B00000001,  B00000010,  B00000000,  B00000000,  //  ^
4, 8,  B01000000,  B01000000,  B01000000,  B01000000,  B00000000,  //  _
2, 8,  B00000001,  B00000010,  B00000000,  B00000000,  B00000000,  //  `
4, 8,  B00100000,  B01010100,  B01010100,  B01111000,  B00000000,  //  a
4, 8,  B01111111,  B01000100,  B01000100,  B00111000,  B00000000,  //  b
4, 8,  B00111000,  B01000100,  B01000100,  B00101000,  B00000000,  //  c
4, 8,  B00111000,  B01000100,  B01000100,  B01111111,  B00000000,  //  d
4, 8,  B00111000,  B01010100,  B01010100,  B00011000,  B00000000,  //  e
3, 8,  B00000100,  B01111110,  B00000101,  B00000000,  B00000000,  //  f
4, 8,  B10011000,  B10100100,  B10100100,  B01111000,  B00000000,  //  g
4, 8,  B01111111,  B00000100,  B00000100,  B01111000,  B00000000,  //  h
3, 8,  B01000100,  B01111101,  B01000000,  B00000000,  B00000000,  //  i
4, 8,  B01000000,  B10000000,  B10000100,  B01111101,  B00000000,  //  j
4, 8,  B01111111,  B00010000,  B00101000,  B01000100,  B00000000,  //  k
3, 8,  B01000001,  B01111111,  B01000000,  B00000000,  B00000000,  //  l
5, 8,  B01111100,  B00000100,  B01111100,  B00000100,  B01111000,  //  m
4, 8,  B01111100,  B00000100,  B00000100,  B01111000,  B00000000,  //  n
4, 8,  B00111000,  B01000100,  B01000100,  B00111000,  B00000000,  //  o
4, 8,  B11111100,  B00100100,  B00100100,  B00011000,  B00000000,  //  p
4, 8,  B00011000,  B00100100,  B00100100,  B11111100,  B00000000,  //  q
4, 8,  B01111100,  B00001000,  B00000100,  B00000100,  B00000000,  //  r
4, 8,  B01001000,  B01010100,  B01010100,  B00100100,  B00000000,  //  s
3, 8,  B00000100,  B00111111,  B01000100,  B00000000,  B00000000,  //  t
4, 8,  B00111100,  B01000000,  B01000000,  B01111100,  B00000000,  //  u
5, 8,  B00011100,  B00100000,  B01000000,  B00100000,  B00011100,  //  v
5, 8,  B00111100,  B01000000,  B00111100,  B01000000,  B00111100,  //  w
5, 8,  B01000100,  B00101000,  B00010000,  B00101000,  B01000100,  //  x
4, 8,  B10011100,  B10100000,  B10100000,  B01111100,  B00000000,  //  y
3, 8,  B01100100,  B01010100,  B01001100,  B00000000,  B00000000,  //  z
3, 8,  B00001000,  B00110110,  B01000001,  B00000000,  B00000000,  //  {
1, 8,  B01111111,  B00000000,  B00000000,  B00000000,  B00000000,  //  |
3, 8,  B01000001,  B00110110,  B00001000,  B00000000,  B00000000,  //  }
4, 8,  B00001000,  B00000100,  B00001000,  B00000100,  B00000000,  //  ~
3, 8,  B00000000,  B00000000,  B00000000,  B00000000,  B00000000,  //  
4, 8,  B11111100,  B00100100,  B00100100,  B00011000,  B00000000,  //  р
4, 8,  B00111000,  B01000100,  B01000100,  B00101000,  B00000000,  //  с
3, 8,  B00000100,  B01111100,  B00000100,  B00000000,  B00000000,  //  т
4, 8,  B10011100,  B10100000,  B10100000,  B01111100,  B00000000,  //  у
5, 8,  B00011000,  B00100100,  B11111100,  B00100100,  B00011000,  //  ф
5, 8,  B01000100,  B00101000,  B00010000,  B00101000,  B01000100,  //  х
5, 8,  B01111100,  B01000000,  B01000000,  B01111100,  B11000000,  //  ц
4, 8,  B00011100,  B00010000,  B00010000,  B01111100,  B00000000,  //  ч
5, 8,  B01111100,  B01000000,  B01110000,  B01000000,  B01111100,  //  ш
5, 8,  B01111100,  B01000000,  B01110000,  B01000000,  B11111100,  //  щ
5, 8,  B00000100,  B01111100,  B01001000,  B01001000,  B00110000,  //  ъ
5, 8,  B01111100,  B01001000,  B00110000,  B00000000,  B01111100,  //  ы
4, 8,  B01111100,  B01001000,  B01001000,  B00110000,  B00000000,  //  ь
4, 8,  B01000100,  B01010100,  B01010100,  B00111000,  B00000000,  //  э
5, 8,  B01111100,  B00010000,  B00111000,  B01000100,  B00111000,  //  ю
4, 8,  B01001000,  B00110100,  B00010100,  B01111100,  B00000000,  //  я
4, 8,  B01111110,  B00010001,  B00010001,  B01111110,  B00000000,  //  А
4, 8,  B01111111,  B01001001,  B01001001,  B00110001,  B00000000,  //  Б
4, 8,  B01111111,  B01001001,  B01001001,  B00110110,  B00000000,  //  В
4, 8,  B01111111,  B00000001,  B00000001,  B00000001,  B00000000,  //  Г
5, 8,  B11000000,  B01111110,  B01000001,  B01111111,  B11000000,  //  Д
4, 8,  B01111111,  B01001001,  B01001001,  B01000001,  B00000000,  //  Е
5, 8,  B01110111,  B00001000,  B01111111,  B00001000,  B01110111,  //  Ж
4, 8,  B00100010,  B01000001,  B01001001,  B00110110,  B00000000,  //  З
4, 8,  B01111111,  B00100000,  B00010000,  B01111111,  B00000000,  //  И
4, 8,  B01111111,  B00100000,  B00010001,  B01111101,  B00000000,  //  Й
4, 8,  B01111111,  B00001000,  B00010100,  B01100011,  B00000000,  //  К
4, 8,  B01000000,  B00111100,  B00000010,  B01111111,  B00000000,  //  Л
5, 8,  B01111111,  B00000010,  B00001100,  B00000010,  B01111111,  //  М
4, 8,  B01111111,  B00001000,  B00001000,  B01111111,  B00000000,  //  Н
4, 8,  B00111110,  B01000001,  B01000001,  B00111110,  B00000000,  //  О
4, 8,  B01111111,  B00000001,  B00000001,  B01111111,  B00000000,  //  П
4, 8,  B01111111,  B00001001,  B00001001,  B00000110,  B00000000,  //  Р
4, 8,  B00111110,  B01000001,  B01000001,  B00100010,  B00000000,  //  С
5, 8,  B00000001,  B00000001,  B01111111,  B00000001,  B00000001,  //  Т
4, 8,  B01000111,  B01001000,  B01001000,  B00111111,  B00000000,  //  У
5, 8,  B00001110,  B00010001,  B01111111,  B00010001,  B00001110,  //  Ф
5, 8,  B01100011,  B00010100,  B00001000,  B00010100,  B01100011,  //  Х
5, 8,  B01111111,  B01000000,  B01000000,  B01111111,  B11000000,  //  Ц
4, 8,  B00001111,  B00001000,  B00001000,  B01111111,  B00000000,  //  Ч
5, 8,  B01111111,  B01000000,  B01111100,  B01000000,  B01111111,  //  Ш
5, 8,  B01111111,  B01000000,  B01111100,  B01000000,  B11111111,  //  Щ
5, 8,  B00000001,  B01111111,  B01001000,  B01001000,  B00110000,  //  Ъ
5, 8,  B01111111,  B01001000,  B00110000,  B00000000,  B01111111,  //  Ы
4, 8,  B01111111,  B01001000,  B01001000,  B00110000,  B00000000,  //  Ь
4, 8,  B01000001,  B01001001,  B01001001,  B00111110,  B00000000,  //  Э
5, 8,  B01111111,  B00001000,  B00111110,  B01000001,  B00111110,  //  Ю
4, 8,  B01000110,  B00101001,  B00011001,  B01111111,  B00000000,  //  Я
4, 8,  B00100000,  B01010100,  B01010100,  B01111000,  B00000000,  //  а
4, 8,  B00111100,  B01001010,  B01001010,  B00110001,  B00000000,  //  б
4, 8,  B01111110,  B01011001,  B01010110,  B00100000,  B00000000,  //  в
4, 8,  B01111100,  B00000100,  B00000100,  B00000100,  B00000000,  //  г
5, 8,  B11000000,  B01111000,  B01000100,  B01111100,  B11000000,  //  д
4, 8,  B00111000,  B01010100,  B01010100,  B00011000,  B00000000,  //  е
5, 8,  B01101100,  B00010000,  B01111100,  B00010000,  B01101100,  //  ж
4, 8,  B01001000,  B10000100,  B10010100,  B01101000,  B00000000,  //  з
4, 8,  B01111100,  B00100000,  B00010000,  B01111100,  B00000000,  //  и
4, 8,  B01111100,  B00100001,  B00010001,  B01111100,  B00000000,  //  й
4, 8,  B01111100,  B00010000,  B00101000,  B01000100,  B00000000,  //  к
4, 8,  B01000000,  B00111000,  B00000100,  B01111100,  B00000000,  //  л
5, 8,  B01111100,  B00001000,  B00010000,  B00001000,  B01111100,  //  м
4, 8,  B01111100,  B00010000,  B00010000,  B01111100,  B00000000,  //  н
4, 8,  B00111000,  B01000100,  B01000100,  B00111000,  B00000000,  //  о
4, 8,  B01111100,  B00000100,  B00000100,  B01111100,  B00000000,  //  п
4, 8,  B01111101,  B01010100,  B01010100,  B01010101,  B00000000,  //  Ё
4, 8,  B00111001,  B01010100,  B01010100,  B01001001,  B00000000,  //  ё


};



MaxMatrix m(data, load, clock, maxInUse);
byte buffer[10];
void setup(){
  m.init();
  m.setIntensity(brightness);
  Serial.begin(9600);
}

void loop(){
/*
  while (Serial.available() > 0){
    byte c = Serial.read();
    printCharWithShift(c, speeds);
  }
  m.shiftLeft(false, true);
  */
 printStringWithShift(string1, speeds);
}

void printCharWithShift(char c, int shift_speed){
  if (c < 32) return;
  if (c == 129 && flag_s == 1) c = 192;
  if (c == 145 && flag_s == 2) c = 193;
  if (c > 207) {
     if (c == 208) flag_s=1;
     if (c == 209) flag_s=2; 
    return;
  } else {
    flag_s=0;
  }
  c -= 32;
  memcpy_P(buffer, CH + lendig*c, lendig);
  m.writeSprite(32, 0, buffer);
  m.setColumn(32 + buffer[0], 0);
  
  for (int i=0; i<buffer[0]+1; i++) 
  {
    delay(shift_speed);
    m.shiftLeft(false, false);
  }
}

void printStringWithShift(char* s, int shift_speed){
  while (*s != 0){
    printCharWithShift(*s, shift_speed);
    s++;
  }
}

void printString(char* s)
{
  int col = 0;
  while (*s != 0)
  {
    if (*s < 32) continue;
    char c = *s - 32;
    memcpy_P(buffer, CH + lendig*c, lendig);
    m.writeSprite(col, 0, buffer);
    m.setColumn(col + buffer[0], 0);
    col += buffer[0] + 1;
    s++;
  }
}
